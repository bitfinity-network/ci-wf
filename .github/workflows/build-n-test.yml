name: "Build and Test"
on:
  workflow_call:
    inputs:
      # Docker image to use for the test environment
      container-image:
        type: string
        required: true
      # Tests script to launch integration (whatever) tests with DFX environment
      # If skipped tests would not be launched
      test-script:
        type: string
        required: false
      # Force skipping test-script if it is provided
      # Use this for advanced configuration
      skip-test:
        type: boolean
        required: false
      # Do not fail on audit warnings only of critical errors
      audit-allow-warnings:
        type: boolean
        required: false
      # Name of the github artfact to upload for reusing in next jobs
      # If not defined -> would skip artifact uploading
      output-artifact:
        type: string
        required: false
      # Script that builds artifact files and put them into .artifact directory
      artifact-script:
        type: string
        required: false
      # Additional artifact logic to run before tests
      artifact-pre-script:
        type: string
        required: false
      enable-target-cache:
        type: boolean
        required: false
      disable-cache:
        type: boolean
        required: false
      rs-skip-clippy:
        type: boolean
        required: false
      git-fetch-depth:
        type: string
        required: false
    secrets:
      gh_token:
        required: true
      gh_login:
        required: true

env:
  CARGO_TERM_COLOR: always

jobs:
  assemble-and-test:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.container-image }}
      credentials:
        username: ${{ secrets.gh_login }}
        password: ${{ secrets.gh_token }}

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.gh_token }}
          fetch-depth: ${{ inputs.git-fetch-depth }}

      - name: Checking for a test tag
        id: tag
        run: |
          TT=""
          if [ "$GITHUB_REF_TYPE" = "tag" ] && [ "${GITHUB_REF_NAME%-test}" != "$GITHUB_REF_NAME" ]; then TT="true"; fi
          echo "::set-output name=test::$TT"

      # - name: Geting week number
      #   id: date
      #   run: echo "::set-output name=week::$(date +'%U')"
      
      - name: Getting src cache tag
        id: cache
        # Split only between main and other branches
        run: echo "::set-output name=tag::$(if [ "$GITHUB_REF_NAME" = "main" ]; then echo "main"; else echo "branch"; fi)"
        # run: echo "::set-output name=tag::$(if [ -z "$GITHUB_HEAD_REF" ]; then echo $GITHUB_REF_NAME; else echo $GITHUB_HEAD_REF; fi)"
        # run: echo "::set-output name=tag::$(git ls-files -s $GITHUB_WORKSPACE/neuro/*/src | git hash-object --stdin)"

      # - name: Cargo deps cache
      #   if: ${{ ! inputs.disable-cache }}
      #   uses: actions/cache@v3
      #   with:
      #     # hashFiles function does not work because of error "The template is not valid." but template is valid
      #     # key: cargo-full-${{ github.ref_name }}-${{ hashFiles('**/Cargo.toml') }}
      #     # Cache cargo dependencies only once per week for all branches 
      #     key: cargo-deps-${{ steps.date.outputs.week }}
      #     restore-keys: |
      #       cargo-deps-

      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       /usr/local/cargo/bin/
      #       /usr/local/cargo/registry/index/
      #       /usr/local/cargo/registry/cache/
      #       /usr/local/cargo/git/db/

      - uses: Swatinem/rust-cache@v2
        if: ${{ ! inputs.disable-cache }}
        with:
          key: "${{ steps.cache.outputs.tag }}"
          cache-targets:  ${{ inputs.enable-target-cache }}

      # - name: Cargo target cache
      #   if: ${{ inputs.enable-target-cache && ! inputs.disable-cache}}
      #   uses: actions/cache@v3
      #   with:
      #     # Cache target once per week/branch
      #     key: cargo-target-${{ steps.cache.outputs.tag }}-${{ steps.date.outputs.week }}
      #     restore-keys: |
      #       cargo-target-${{ steps.cache.outputs.tag }}-
      #       cargo-target-main-
      #       cargo-target-

      #     path: |
      #       ${{ github.workspace }}/target

      - name: "Audit prepare config, adding ignores from file ./AUDIT_IGNORE if any"
        if: ${{ ! steps.tag.outputs.test }}
        id: audit
        run: |
          AUDIT_IGNORE=$(cat AUDIT_IGNORE  2>/dev/null | grep RUSTSEC | awk '$0="--ignore "$0' ORS=" ")
          echo "::set-output name=ignore::$AUDIT_IGNORE"
          echo "::set-output name=w::$(if [ "${{ inputs.audit-allow-warnings }}" = "true" ]; then echo ""; else echo " -D warnings "; fi)"

      - name: "Audit"
        if: ${{ ! steps.tag.outputs.test }}
        uses: actions-rs/cargo@v1
        with:
          command: audit
          args: ${{ steps.audit.outputs.w }} ${{ steps.audit.outputs.ignore }}
          
      - name: "Checking code format"
        if: ${{ ! steps.tag.outputs.test }}
        run: cargo fmt --all --check

      - name: "Checking code style"
        if: ${{ ! inputs.rs-skip-clippy && ! steps.tag.outputs.test}} 
        run: cargo clippy --all-features --all-targets

      - name: "Current environment"
        run: |
          env

      - name: "Artifact initialization"
        if: ${{ inputs.output-artifact }}
        run: |
          rm -rf .artifact
          mkdir  .artifact
          ${{ inputs.artifact-pre-script }}

      - name: "Running test script"
        if: ${{ inputs.test-script && ! inputs.skip-test && ! steps.tag.outputs.test }}
        run: ${{ inputs.test-script }}

      - name: "Preparing artifact files"
        if: ${{ inputs.output-artifact }}
        run: |
          ${{ inputs.artifact-script }}

          echo "Artifact content:"
          ls -laR .artifact

      - name: "Uploading artifact: ${{ inputs.output-artifact }}"
        if: ${{ inputs.output-artifact }}
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          retention-days: 3
          name: ${{ inputs.output-artifact }}
          path: .artifact/*
      
      - name: "Removing wasm modules from target if any"
        run: rm -f target/wasm32-unknown-unknown/release/*.wasm
